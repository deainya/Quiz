// –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ –≤–Ω–µ—à–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç—ã
const config = require('./config');

const { Telegraf } = require('telegraf');
const { Extra, Markup } = Telegraf;

// –ö–≤–∏–∑ –±–æ—Ç
const bot = new Telegraf(config.bot_token);

// –ß–∞—Ç—ã
//config.chats[0]
//config.chats[1]

// –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
var tasks = [
    {step: 0, task: "–ó–∞–¥–∞–Ω–∏–µ 1 (–ø–æ–µ—Ö–∞–ª–∏)", answer: "!–ø–æ–µ—Ö–∞–ª–∏", time: 0, tryouts:0, points: 0, img: []},
    {step: 1, task: "–ó–∞–¥–∞–Ω–∏–µ 2 (–Ω–∞—Å–≤—è–∑–∏)", answer: "!–Ω–∞—Å–≤—è–∑–∏", time: 10, tryouts:0, points: 0, img: []},
    {step: 2, task: "–ó–∞–¥–∞–Ω–∏–µ 3 (—Ö–∞—Ä–∞–∫—Ç–µ—Ä)", answer: "!—Ö–∞—Ä–∞–∫—Ç–µ—Ä", time: 7, tryouts:3, points: 50, img: []},
    {step: 3, task: "–ó–∞–¥–∞–Ω–∏–µ 4 (—É—Ä–æ–≤–µ–Ω—å)", answer: "!—É—Ä–æ–≤–µ–Ω—å", time: 3, tryouts:0, points: 0, img: []},
    {step: 4, task: "–ó–∞–¥–∞–Ω–∏–µ 5 (–≤–µ—Ä–Ω)", answer: "!–≤–µ—Ä–Ω", time: 7, tryouts:3, points: 50, img: []}
];

var dstart = Date.now();
var dnow = dstart;
var step = 0;

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
function toMin(mSec) {
    return Math.round(mSec/60000);
};

// –†–µ–∞–∫—Ü–∏—è –Ω–∞ must have –∫–æ–º–∞–Ω–¥—ã
bot.start((ctx) => ctx.reply(`Hi. My name is Quiz.\nI'm providing Quiz for IT.\nI work on Cloud Function`))
bot.help((ctx) => ctx.reply(`Hi, ${ctx.message.from.first_name}.\nI can say hi and nothing more üôÇ`))
bot.command('quizit', (ctx) => {
    step = 0;
    dstart = Date.now();
    dnow = dstart;
    ctx.reply('–ü—Ä–∏–≤–µ—Ç...\n'+
              '–ö–ª—é—á –Ω–∞ —Å—Ç–∞—Ä—Ç –∏ –æ—Ç –≤–∏–Ω—Ç–∞!');
})

// –†–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ
bot.on('new_chat_members', (ctx) => {
    console.log(ctx.message.new_chat_members);
    ctx.replyWithMarkdown(`–ü—Ä–∏–≤–µ—Ç, *${ctx.message.new_chat_members[0].first_name}*!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã!`);
})

// –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
bot.on('text', (ctx) => {
    if (step < tasks.length) {
        var txt = ctx.message.text.toLowerCase();
        //check = (tasks[step].answer).test(txt);
        check = tasks[step].answer == txt;

        if (check) {
            ctx.replyWithMarkdown(tasks[step].task);
            dnow = Date.now();
            ctx.reply('Chat: '+ctx.message.chat.id.toString()+
                      ' step: '+step.toString()+
                      ' time: '+toMin(dnow-dstart).toString()+
                      ' points: '+tasks[step].points.toString());
            step++;
        }
    } else {
        console.log('Step (last): '+step.toString());
    }
})

// –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω—å–∫–∏
bot.catch((err) => {
    console.log('Oops', err);
})

// –ó–∞–ø—É—Å–∫–∞–µ–º poll –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞
console.log('started');
bot.startPolling();
