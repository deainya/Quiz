// –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –∏ –≤–Ω–µ—à–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç—ã
const config = require('./config');
const data = require('./data');

const { Telegraf } = require('telegraf');
const { Extra, Markup } = Telegraf;

// –ö–≤–∏–∑ –±–æ—Ç
const bot = new Telegraf(config.bot_token);

// –û–±—ä—è–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
var qRs = [
        {chat: -1001742053790, step: 0, t1:[], t2:[], trys:[], pts:[], total: 0},
        {chat: -671590480, step:0, t1:[], t2:[], trys:[], pts:[], total: 0}
    ];
var a25 = [];
var a27 = [];

// –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –º–∏–ª–∏—Å–µ–∫—É–Ω–¥—ã –≤ –º–∏–Ω—É—Ç—ã
function toMin(mSec) {
    return Math.round(mSec/60000);
};

// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –º–µ–∂–¥—É min (–≤–∫–ª—é—á–∞—è) –∏ max (–Ω–µ –≤–∫–ª—é—á–∞—è)
function getRandom(min, max) {
    return Math.floor(Math.random() * (max - min) + min);
}

// –†–µ–∞–∫—Ü–∏—è –Ω–∞ must have –∫–æ–º–∞–Ω–¥—ã
bot.start((ctx) => ctx.reply(`Hi. My name is Quiz.\nI'm providing Quiz for IT.\nI work on Cloud Function`))
bot.help((ctx) => ctx.reply(`Hi, ${ctx.message.from.first_name}.\nI can say hi and nothing more üôÇ`))
bot.command('quizit', (ctx) => {
    for (var i = 0; i < qRs.length; i++) {
        qRs[i].step = 24;
        qRs[i].t1 = [];
        qRs[i].t1.push(Date.now());
        qRs[i].t2 = [];
        qRs[i].trys = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        qRs[i].pts = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
        qRs[i].total = 0;
        //bot.telegram.sendMessage(qRs[i].chat, data.tasks[qRs[i].step], { parse_mode: "MarkdownV2" }) //team 1
    }
    ctx.reply('–ü—Ä–∏–≤–µ—Ç...\n'+
              '–ö–ª—é—á –Ω–∞ —Å—Ç–∞—Ä—Ç –∏ –æ—Ç –≤–∏–Ω—Ç–∞!');
})

// –†–µ–∞–∫—Ü–∏—è –Ω–∞ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –≥—Ä—É–ø–ø–µ
bot.on('new_chat_members', (ctx) => {
    console.log(ctx.message.new_chat_members);
    ctx.replyWithMarkdown(`–ü—Ä–∏–≤–µ—Ç, *${ctx.message.new_chat_members[0].first_name}*!\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç –≤–∞—à–µ–π –∫–æ–º–∞–Ω–¥—ã!`);
})

// –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
bot.on('text', async (ctx) => {
    var c = ctx.message.chat;
    for (var i = 0; i < qRs.length; i++) {
        if (qRs[i].chat == c.id) {
            //console.log(c.title);
            if (qRs[i].step < data.tasks.length-1) {
                var txt = ctx.message.text.toLowerCase();
                //check = (qRs[step].answer).test(txt);
                let check0 = txt.substr(0, 1) == '!';
                let check1 = data.conds[qRs[i].step].answer == txt;
                let check2 = data.conds[qRs[i].step].tryouts == 0;
                let check3 = txt.substr(0, 1) == '?';
                let check4 = (i == 25 && i == 27);
                if (check1 && check2) {
                    //–í—ã–≤–æ–¥ —Å–ª–µ–¥—É—é—â–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
                    qRs[i].t1.push(Date.now());
                    qRs[i].t2.push(qRs[i].t1);
                    qRs[i].step++;
                    await ctx.replyWithMarkdown(data.tasks[qRs[i].step]);
                    //console.log('next - ', qRs[i]);

                } else if (check1) {
                    //–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç
                    await ctx.replyWithMarkdown('*'+data.right[getRandom(0, 13)]+'*');
                    qRs[i].pts[qRs[i].step] = data.conds[qRs[i].step].points;
                    qRs[i].trys[qRs[i].step]++;
                    //let msg = '–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: '+(data.conds[qRs[i].step].tryouts-qRs[i].trys[qRs[i].step]).toString();
                    //await ctx.reply(msg);
                    qRs[i].t2.push(qRs[i].t1);
                    qRs[i].t1.push(Date.now());
                    qRs[i].step++;
                    await ctx.replyWithMarkdown(data.tasks[qRs[i].step]);
                    //console.log('right - ', qRs[i]);

                } else if (check4) {
                    console.log(qRs[i].step, ' ', txt, check4, data.conds[qRs[i].step].answer.includes(txt));

                    if (data.conds[qRs[i].step].answer.includes(txt)) {
                        //–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–ø–µ—Ü. –≤–æ–ø—Ä–æ—Å + —Ö–∞—Ä–¥–∫–æ–¥ 25
                        if (qRs[i].step == 25 && !a25.includes(txt)) {
                            a25.push(txt);
                            await ctx.replyWithMarkdown('*'+data.right[getRandom(0, 13)]+'*');
                            qRs[i].pts[qRs[i].step] = qRs[i].pts[qRs[i].step] + data.conds[qRs[i].step].points;
                            qRs[i].trys[qRs[i].step]++;
                            let msg = '–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: '+(data.conds[qRs[i].step].tryouts-qRs[i].trys[qRs[i].step]).toString();
                            await ctx.reply(msg);
                            if (a25.length == 3) {
                                qRs[i].t2.push(qRs[i].t1);
                                qRs[i].t1.push(Date.now());
                                qRs[i].step++;
                                await ctx.replyWithMarkdown(data.tasks[qRs[i].step]);
                            }
                        }
                        //–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–ø–µ—Ü. –≤–æ–ø—Ä–æ—Å + —Ö–∞—Ä–¥–∫–æ–¥ 27
                        if (qRs[i].step == 27 && !a27.includes(txt)) {
                            a27.push(txt);
                            await ctx.replyWithMarkdown('*'+data.right[getRandom(0, 13)]+'*');
                            qRs[i].pts[qRs[i].step] = qRs[i].pts[qRs[i].step] + data.conds[qRs[i].step].points;
                            qRs[i].trys[qRs[i].step]++;
                            let msg = '–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: '+(data.conds[qRs[i].step].tryouts-qRs[i].trys[qRs[i].step]).toString();
                            await ctx.reply(msg);
                            if (a27.length == 5) {
                                qRs[i].t2.push(qRs[i].t1);
                                qRs[i].t1.push(Date.now());
                                qRs[i].step++;
                                await ctx.replyWithMarkdown(data.tasks[qRs[i].step]);
                            }
                        }
                    } else {
                        //–Ω–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–ø–µ—Ü. –≤–æ–ø—Ä–æ—Å
                        await ctx.replyWithMarkdown('*'+data.wrong[getRandom(0, 6)]+'*');
                        qRs[i].trys[qRs[i].step]++;
                        let msg = '–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: '+(data.conds[qRs[i].step].tryouts-qRs[i].trys[qRs[i].step]).toString();
                        await ctx.reply(msg);
                        console.log('z: ', qRs[i]);
                        //–∏—Å—á–µ—Ä–ø–∞–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏
                        //...
                    }

                } else if (check0 && !check2) {
                    //–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç
                    await ctx.replyWithMarkdown('*'+data.wrong[getRandom(0, 6)]+'*');
                    qRs[i].trys[qRs[i].step]++;
                    let msg = '–û—Å—Ç–∞–ª–æ—Å—å –ø–æ–ø—ã—Ç–æ–∫: '+(data.conds[qRs[i].step].tryouts-qRs[i].trys[qRs[i].step]).toString();
                    await ctx.reply(msg);
                    //console.log('wrong - ', qRs[i]);
                    //–ò—Å—á–µ—Ä–ø–∞–ª–∏ –≤—Å–µ –ø–æ–ø—ã—Ç–∫–∏
                    //...

                } else {
                    //–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                    console.log(qRs[i].step, ' ', txt, check3, data.Qs21.includes(txt));
                    if (qRs[i].step == 21 && check3) {
                        if (data.Qs21.includes(txt)) {
                            await ctx.replyWithMarkdown('*'+data.right[getRandom(0, 13)]+'*');
                        } else {
                            await ctx.replyWithMarkdown('*'+data.wrong[getRandom(0, 6)]+'*');
                        }
                    }
                }
            }
        }
    }
})

// –õ–æ–≤–∏–º –æ—à–∏–±–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω—å–∫–∏
bot.catch((err) => {
    console.log('Oops', err);
})

// –ó–∞–ø—É—Å–∫–∞–µ–º poll –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–æ—Ç–∞
console.log('started');
bot.startPolling();
